{"version":3,"sources":["AppTitle.js","AppHeader.js","AppTodoItem.js","AppList.js","AppFooter.js","App.js","serviceWorker.js","index.js"],"names":["AppTitle","className","React","Component","AppHeader","props","handleAddClick","bind","e","preventDefault","todoname","this","refs","texto","value","AddTodoItem","type","placeholder","ref","onClick","AppTodoItem","handleDeleteClick","handleCheckedClick","console","log","id","target","getAttribute","DeleteTodoItem","todoid","status","checked","SwitchTodoItem","name","onChange","false","true","aria-hidden","AppList","data","newData","undefined","filter","Fragment","map","item","key","AppFooter","Filter","all","completed","notcompleted","App","OnAddTodoItem","OnDeleteTodoItem","OnSwitchTodoItem","OnFilter","state","index","forEach","element","concat","setState","push","find","Array","from","filtertype","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1fd0e6d0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass AppTitle extends React.Component{\r\n    render(){\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <h3>My Todo List With React</h3>\r\n                </div>\r\n            </div>\r\n            );\r\n    };\r\n}\r\n\r\nexport default AppTitle;","import React from 'react';\r\n\r\n// var style = {\r\n//     inputClass:{\r\n//         width:300\r\n        \r\n//     }\r\n// };\r\n\r\nclass AppHeader extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.handleAddClick = this.handleAddClick.bind(this);        \r\n    }\r\n\r\n    handleAddClick(e){\r\n        e.preventDefault();\r\n        let todoname = this.refs.texto.value;\r\n        this.refs.texto.value='';\r\n        this.props.AddTodoItem(todoname);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n        <div className=\"row\">\r\n            <div className=\"col-2\">&nbsp;</div>\r\n            <div className=\"col-6\">\r\n                <input className=\"form-control\" type='text' placeholder='Please input a todo name' ref='texto' />\r\n            </div>\r\n            <div className=\"col-2 left\">\r\n                <input className=\"form-control\" type='button' value='Add' onClick={this.handleAddClick}/>\r\n            </div>\r\n            <div className=\"col-2\">&nbsp;</div>\r\n        </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default AppHeader;","import React from 'react';\r\n\r\n// var style = {\r\n//     row:{\r\n//         width:'100%'\r\n//     },\r\n//     cell:{\r\n//         width:'23%',\r\n//         padding:5,\r\n//         float:'float',\r\n//         display:'inline-block',\r\n//         textAlign:'left'\r\n//     }\r\n// };\r\n\r\nclass AppTodoItem extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.handleDeleteClick = this.handleDeleteClick.bind(this);\r\n        this.handleCheckedClick = this.handleCheckedClick.bind(this);\r\n    }\r\n\r\n    handleDeleteClick(e){\r\n        e.preventDefault();\r\n        console.log('AppTodoItem->handleDeleteClick');\r\n        var id = e.target.getAttribute('todoid')*1;\r\n        this.props.DeleteTodoItem(id);\r\n    }\r\n\r\n    handleCheckedClick(e){\r\n        //e.preventDefault();\r\n        console.log('AppTodoItem -> handleCheckedClick');        \r\n        let id = this.refs.todoid.getAttribute('todoid');\r\n        let status = e.target.checked;\r\n        this.props.SwitchTodoItem(id*1, status);\r\n    }\r\n\r\n    render(){    \r\n        var d = {\r\n            false:'Not Completed',\r\n            true:'Completed'\r\n        };\r\n        \r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-1\"><span>{this.props.id}</span></div>\r\n                <div className=\"col-5\"><span>{this.props.name}</span></div>         \r\n                <div className=\"col-4\">\r\n                    <input className=\"form-control\" type='checkbox' checked={this.props.status} onChange={this.handleCheckedClick} />\r\n                    <span>{ d[this.props.status]}</span>\r\n                </div>\r\n                {/* <div className=\"col-2\"><input className=\"form-control\" type='button' value='Delete' onClick={this.handleDeleteClick} ref='todoid' todoid={this.props.id} /></div> */}\r\n                <div className=\"col-2\"><i className=\"fa fa-trash-o\" aria-hidden=\"true\" onClick={this.handleDeleteClick} ref='todoid' todoid={this.props.id}></i></div>\r\n            </div>\r\n        );    \r\n    };\r\n}\r\n\r\nexport default AppTodoItem;","import React from 'react';\r\nimport AppTodoItem from './AppTodoItem';\r\n\r\nclass AppList extends React.Component{   \r\n    // constructor(props){\r\n    //     super(props);\r\n    //     this.OnDeleteTodoItem = this.OnDeleteTodoItem.bind(this);\r\n    // }\r\n\r\n    // OnDeleteTodoItem(e){\r\n    //     console.log('AppList->OnDeleteTodoItem');\r\n    //     this.props.DeleteTodoItem(e);\r\n    // }\r\n\r\n    render(){\r\n        const {data} = this.props;\r\n        const {DeleteTodoItem} = this.props;\r\n        const {SwitchTodoItem} = this.props;\r\n\r\n        let newData = undefined;\r\n        if (0 === this.props.filter){\r\n            // not completed\r\n            newData = data.filter(e=>!e.status);\r\n        }\r\n        else if (1 === this.props.filter){\r\n            // completed\r\n            newData = data.filter(e=>e.status);\r\n        }\r\n        else{\r\n            // all\r\n            newData = data;\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {\r\n                    newData.map(function (item) {                        \r\n                        return <AppTodoItem key={item.id} id={item.id} name={item.name} status={item.status} DeleteTodoItem={DeleteTodoItem} SwitchTodoItem={SwitchTodoItem} />\r\n                    })\r\n                }\r\n            </React.Fragment>\r\n        );\r\n    };\r\n}\r\n\r\nexport default AppList;","import React from 'react';\r\n\r\nclass AppFooter extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.handleCheckedClick = this.handleCheckedClick.bind(this);\r\n    }\r\n\r\n    handleCheckedClick(e){\r\n        let filter = e.target.value;\r\n        this.props.Filter(filter*1);\r\n    }\r\n\r\n    render(){\r\n        const{filter} = this.props;\r\n\r\n        let all = false;\r\n        let completed = false;\r\n        let notcompleted = false;\r\n\r\n        if (0 === filter){\r\n            notcompleted = true;\r\n        }\r\n        else if (1 === filter){\r\n            completed = true;\r\n        }\r\n        else{\r\n            all = true;\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"row footer\">\r\n                    <div className=\"col-12\"><span>Select a filter condition:</span></div>\r\n                </div>\r\n                <div className=\"row footer\">\r\n                    <div className=\"col-3\">&nbsp;</div>\r\n                    <div className=\"col-3\"><input className=\"form-control\" type='radio' checked={all} value='-1' onChange={this.handleCheckedClick} /><span>All</span></div>\r\n                    <div className=\"col-3\"><input className=\"form-control\" type='radio' checked={completed} value='1' onChange={this.handleCheckedClick} /><span>Completed</span></div>\r\n                    <div className=\"col-3\"><input className=\"form-control\" type='radio' checked={notcompleted} value='0' onChange={this.handleCheckedClick} /><span>Not Completed</span></div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    };\r\n}\r\n\r\nexport default AppFooter;","import React from 'react';\r\nimport './resources/css/font-awesome.css'\r\nimport './App.css';\r\nimport AppTitle from './AppTitle';\r\nimport AppHeader from './AppHeader';\r\nimport AppList from './AppList';\r\nimport AppFooter from './AppFooter';\r\n\r\nclass App extends React.Component {  \r\n  constructor(props){\r\n    super(props);\r\n    this.OnAddTodoItem = this.OnAddTodoItem.bind(this);\r\n    this.OnDeleteTodoItem = this.OnDeleteTodoItem.bind(this);\r\n    this.OnSwitchTodoItem = this.OnSwitchTodoItem.bind(this);\r\n    this.OnFilter = this.OnFilter.bind(this);\r\n    this.state={ data: this.props.data, filter: -1 };\r\n  }\r\n\r\n  OnAddTodoItem(item){\r\n    console.log(item);\r\n    let index = -1;\r\n    this.state.data.forEach(element => {\r\n      if (element.id > index){\r\n        index = element.id;\r\n      }\r\n    });\r\n    let newData = this.state.data.concat({ id: index+1, name: item, status: false });\r\n    this.setState({ data: newData});\r\n  }\r\n\r\n  OnDeleteTodoItem(id){\r\n    console.log(id);\r\n\r\n    let newData = [];\r\n    this.state.data.forEach(element => {\r\n      if (id !== element.id){\r\n        newData.push(element);\r\n      }\r\n    });\r\n\r\n    this.setState({ data: newData });\r\n  }\r\n\r\n  OnSwitchTodoItem(id, status){\r\n    let {data} = this.state;\r\n    let item = data.find(e => e.id === id);\r\n    item.status = status;\r\n    \r\n    let newData = Array.from(data);\r\n\r\n    this.setState({ data: newData});\r\n  }\r\n\r\n  OnFilter(filtertype){\r\n    let filter = -1;\r\n    if (0 === filtertype || 1 === filtertype){\r\n      filter = filtertype;\r\n    }\r\n\r\n    this.setState({filter: filter});\r\n  }\r\n\r\n  render() {\r\n    const {data} = this.state;\r\n    const {filter} = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div id=\"content\" className=\"container\">\r\n            <AppTitle />\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <hr/>\r\n              </div>\r\n            </div>\r\n            <AppHeader AddTodoItem={this.OnAddTodoItem} />            \r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <hr/>\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"container col-12\">\r\n                <AppList data={data} DeleteTodoItem={this.OnDeleteTodoItem} SwitchTodoItem={this.OnSwitchTodoItem} filter={filter} />\r\n              </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                <hr/>\r\n              </div>\r\n            </div>\r\n            <AppFooter filter={filter} Filter={this.OnFilter} />\r\n          </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nlet data = [\r\n    { id:1, name:'Brush my Teeth', status:true},\r\n    { id:2, name:'Wash my face', status:false},\r\n    { id:3, name:'Wash clothes', status:false},\r\n    { id:4, name:'Cooking', status:true}\r\n];\r\n\r\nReactDOM.render(<App data={data}/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}